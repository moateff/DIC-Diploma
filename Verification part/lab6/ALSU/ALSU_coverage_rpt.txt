Coverage Report by instance with details

=================================================================================
=== Instance: /alsu_tb/alsuif
=== Design Unit: work.alsu_if
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         80        80         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_tb/alsuif --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[2-0]           1           1      100.00 
                                            B[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                               cin           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (80 of 80 bins)

=================================================================================
=== Instance: /alsu_tb/DUT
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        31         1    96.87%

================================Branch Details================================

Branch Coverage for instance /alsu_tb/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    24                                      1049     Count coming in to IF
    24              1                        100       if(rst) begin
    35              1                        949       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                      1049     Count coming in to IF
    51              1                        100       if(rst) begin
    53              1                        949       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    54                                       949     Count coming in to IF
    54              1                        488           if (invalid)
    56              1                        461           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                      1045     Count coming in to IF
    63              1                         96       if(rst) begin
    66              1                        949       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    67                                       949     Count coming in to IF
    67              1                          2         if (bypass_A_reg && bypass_B_reg)
    69              1                         44         else if (bypass_A_reg)
    71              1                         40         else if (bypass_B_reg)
    73              1                        445         else if (invalid) 
    75              1                        418         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                       418     Count coming in to CASE
    77              1                        165               3'h0: begin 
    87              1                        123               3'h1: begin
    97              1                         33               3'h2: begin                  
    103             1                         31               3'h3: out <= A_reg * B_reg;
    104             1                         32               3'h4: begin
    110             1                         34               3'h5: begin
                                         ***0***     All False Count
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    78                                       165     Count coming in to IF
    78              1                         23                 if (red_op_A_reg && red_op_B_reg)
    80              1                         25                 else if (red_op_A_reg) 
    82              1                         32                 else if (red_op_B_reg)
    84              1                         85                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    88                                       123     Count coming in to IF
    88              1                         30                 if (red_op_A_reg && red_op_B_reg)
    90              1                         28                 else if (red_op_A_reg) 
    92              1                         29                 else if (red_op_B_reg)
    94              1                         36                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    105                                       32     Count coming in to IF
    105             1                         14                 if (direction_reg)
    107             1                         18                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    111                                       34     Count coming in to IF
    111             1                         16                 if (direction_reg)
    113             1                         18                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /alsu_tb/DUT --

  File ALSU.v
----------------Focused Condition View-------------------
Line       67 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       78 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       88 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /alsu_tb/DUT --

  File ALSU.v
----------------Focused Expression View-----------------
Line       18 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       19 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       20 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        48         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_tb/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;
    14                                               
    15                                               wire invalid_red_op, invalid_opcode, invalid;
    16                                               
    17                                               //Invalid handling
    18              1                        961     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    19              1                        857     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    20              1                        583     assign invalid = invalid_red_op | invalid_opcode;
    21                                               
    22                                               //Registering input signals
    23              1                       1049     always @(posedge clk or posedge rst) begin
    24                                                 if(rst) begin
    25              1                        100          cin_reg <= 0;
    26              1                        100          red_op_B_reg <= 0;
    27              1                        100          red_op_A_reg <= 0;
    28              1                        100          bypass_B_reg <= 0;
    29              1                        100          bypass_A_reg <= 0;
    30              1                        100          direction_reg <= 0;
    31              1                        100          serial_in_reg <= 0;
    32              1                        100          opcode_reg <= 0;
    33              1                        100          A_reg <= 0;
    34              1                        100          B_reg <= 0;
    35                                                 end else begin
    36              1                        949          cin_reg <= cin;
    37              1                        949          red_op_B_reg <= red_op_B;
    38              1                        949          red_op_A_reg <= red_op_A;
    39              1                        949          bypass_B_reg <= bypass_B;
    40              1                        949          bypass_A_reg <= bypass_A;
    41              1                        949          direction_reg <= direction;
    42              1                        949          serial_in_reg <= serial_in;
    43              1                        949          opcode_reg <= opcode;
    44              1                        949          A_reg <= A;
    45              1                        949          B_reg <= B;
    46                                                 end
    47                                               end
    48                                               
    49                                               //leds output blinking 
    50              1                       1049     always @(posedge clk or posedge rst) begin
    51                                                 if(rst) begin
    52              1                        100          leds <= 0;
    53                                                 end else begin
    54                                                     if (invalid)
    55              1                        488             leds <= ~leds;
    56                                                     else
    57              1                        461             leds <= 0;
    58                                                 end
    59                                               end
    60                                               
    61                                               //ALSU output processing
    62              1                       1045     always @(posedge clk or posedge rst) begin
    63                                                 if(rst) begin
    64              1                         96         out <= 0;
    65                                                 end
    66                                                 else begin
    67                                                   if (bypass_A_reg && bypass_B_reg)
    68              1                          2           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    69                                                   else if (bypass_A_reg)
    70              1                         44           out <= A_reg;
    71                                                   else if (bypass_B_reg)
    72              1                         40           out <= B_reg;
    73                                                   else if (invalid) 
    74              1                        445             out <= 0;
    75                                                   else begin
    76                                                       case (opcode_reg)
    77                                                         3'h0: begin 
    78                                                           if (red_op_A_reg && red_op_B_reg)
    79              1                         23                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    80                                                           else if (red_op_A_reg) 
    81              1                         25                   out <= |A_reg;
    82                                                           else if (red_op_B_reg)
    83              1                         32                   out <= |B_reg;
    84                                                           else 
    85              1                         85                   out <= A_reg | B_reg;
    86                                                         end
    87                                                         3'h1: begin
    88                                                           if (red_op_A_reg && red_op_B_reg)
    89              1                         30                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    90                                                           else if (red_op_A_reg) 
    91              1                         28                   out <= ^A_reg;
    92                                                           else if (red_op_B_reg)
    93              1                         29                   out <= ^B_reg;
    94                                                           else 
    95              1                         36                   out <= A_reg ^ B_reg;
    96                                                         end
    97                                                         3'h2: begin                  
    98                                                           if (FULL_ADDER == "ON")
    99              1                         33                   out <= A_reg + B_reg + cin_reg;
    100                                                          else
    101                                              	            out <= A_reg + B_reg;
    102                                                        end        
    103             1                         31               3'h3: out <= A_reg * B_reg;
    104                                                        3'h4: begin
    105                                                          if (direction_reg)
    106             1                         14                   out <= {out[4:0], serial_in_reg};
    107                                                          else
    108             1                         18                   out <= {serial_in_reg, out[5:1]};
    109                                                        end
    110                                                        3'h5: begin
    111                                                          if (direction_reg)
    112             1                         16                   out <= {out[4:0], out[5]};
    113                                                          else
    114             1                         18                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        118       118         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_tb/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                        A_reg[2-0]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                        B_reg[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                      bypass_A_reg           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                      bypass_B_reg           1           1      100.00 
                                               cin           1           1      100.00 
                                           cin_reg           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                     direction_reg           1           1      100.00 
                                           invalid           1           1      100.00 
                                    invalid_opcode           1           1      100.00 
                                    invalid_red_op           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                   opcode_reg[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                      red_op_A_reg           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                      red_op_B_reg           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 
                                     serial_in_reg           1           1      100.00 

Total Node Count     =         59 
Toggled Node Count   =         59 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (118 of 118 bins)

=================================================================================
=== Instance: /alsu_tb
=== Design Unit: work.alsu_tb
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       5         5         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_tb --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_top.sv
    5                                                module alsu_tb();
    6                                                    // Clock generation
    7                                                    bit clk;
    8                                                
    9                                                    initial begin
    10              1                          1             forever begin
    11              1                       2003                 #1 clk = ~clk;
    11              2                       2002     
    12                                                       end
    13                                                   end
    14                                                   
    15                                                   // Instantiate the interface
    16                                                   alsu_if alsuif(clk);
    17                                               
    18                                                   // Instantiate the DUT
    19                                                   ALSU DUT (
    20                                                       .clk(clk),
    21                                                       .rst(alsuif.rst),
    22                                                       .cin(alsuif.cin),
    23                                                       .red_op_A(alsuif.red_op_A),
    24                                                       .red_op_B(alsuif.red_op_B),
    25                                                       .bypass_A(alsuif.bypass_A),
    26                                                       .bypass_B(alsuif.bypass_B),
    27                                                       .direction(alsuif.direction),
    28                                                       .serial_in(alsuif.serial_in),
    29                                                       .opcode(alsuif.opcode),
    30                                                       .A(alsuif.A),
    31                                                       .B(alsuif.B),
    32                                                       .leds(alsuif.leds),
    33                                                       .out(alsuif.out)
    34                                                   );
    35                                               
    36                                                   // Run the test
    37                                                   initial begin
    38              1                          1             uvm_config_db #(virtual alsu_if)::set(null, "uvm_test_top", "ALSU_VIF", alsuif);
    39              1                          1             run_test("alsu_test");

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_tb --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /alsu_seq_item_pkg
=== Design Unit: work.alsu_seq_item_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /alsu_seq_item_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_seq_item.sv
------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***         `uvm_object_utils(alsu_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                       1001     Count coming in to IF
    7               2                    ***0***         `uvm_object_utils(alsu_seq_item)
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***         `uvm_object_utils(alsu_seq_item)
    7               4                    ***0***         `uvm_object_utils(alsu_seq_item)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                       1001     Count coming in to IF
    7               5                    ***0***         `uvm_object_utils(alsu_seq_item)
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***         `uvm_object_utils(alsu_seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_seq_item_pkg --

  File ALSU_seq_item.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       7 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         3        10    23.07%

================================Statement Details================================

Statement Coverage for instance /alsu_seq_item_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_seq_item.sv
    1                                                package alsu_seq_item_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_shared_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                class alsu_seq_item extends uvm_sequence_item;
    7               1                    ***0***         `uvm_object_utils(alsu_seq_item)
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                       1001     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                       1001     
    7              10                    ***0***     
    8                                                
    9                                                    rand bit rst;
    10                                                   rand bit cin;
    11                                                   rand bit red_op_A;
    12                                                   rand bit red_op_B;
    13                                                   rand bit bypass_A;
    14                                                   rand bit bypass_B;
    15                                                   rand direction_e direction;
    16                                                   rand bit serial_in;
    17                                                   rand opcode_e opcode;
    18                                                   rand bit signed [2:0] A;
    19                                                   rand bit signed [2:0] B;
    20                                                   logic [15:0] leds;
    21                                                   logic signed [5:0] out;
    22                                               
    23                                                   function new(string name = "alsu_seq_item");
    24              1                       4007             super.new(name);
    25                                                   endfunction
    26                                               
    27                                                   function string convert2string();
    28              1                    ***0***             return $sformatf("%s rst = %0b, A = 0b%0b, B = 0b%0b, opcode = %0s, cin = %0b, red_op_A = %0b, red_op_B = %0b, bypass_A = %0b, bypass_B = %0b, direction = %s, serial_in = %0b, out = 0b%0b, leds = 0x%0h ", 
    29                                                           super.convert2string(), rst, A, B, opcode, cin, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in, out, leds);
    30                                                   endfunction
    31                                               
    32                                                   function string convert2string_stimulus();
    33              1                    ***0***             return $sformatf("rst = %0b, A = 0b%0b, B = 0b%0b, opcode = %0s, cin = %0b, red_op_A = %0b, red_op_B = %0b, bypass_A = %0b, bypass_B = %0b, direction = %s, serial_in = %0b",


=================================================================================
=== Instance: /alsu_main_seq_pkg
=== Design Unit: work.alsu_main_seq_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_main_seq_pkg/alsu_main_seq/body/#ublk#261799367#16/immed__19
                     ALSU_main_seq.sv(19)               0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /alsu_main_seq_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_main_seq.sv
------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***         `uvm_object_utils(alsu_main_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               2                    ***0***         `uvm_object_utils(alsu_main_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***         `uvm_object_utils(alsu_main_seq)
    7               4                    ***0***         `uvm_object_utils(alsu_main_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               5                    ***0***         `uvm_object_utils(alsu_main_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***         `uvm_object_utils(alsu_main_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_main_seq_pkg --

  File ALSU_main_seq.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       7 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15         7         8    46.66%

================================Statement Details================================

Statement Coverage for instance /alsu_main_seq_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_main_seq.sv
    1                                                package alsu_main_seq_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                class alsu_main_seq extends uvm_sequence #(alsu_seq_item);
    7               1                    ***0***         `uvm_object_utils(alsu_main_seq)
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                          1     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                          1     
    7              10                    ***0***     
    8                                                    
    9                                                    alsu_seq_item seq_item;
    10                                               
    11                                                   function new(string name = "alsu_main_seq");
    12              1                          1             super.new(name);
    13                                                   endfunction
    14                                               
    15                                                   task body();
    16              1                       1000             repeat (1000) begin
    17              1                       1000                 seq_item = alsu_seq_item::type_id::create("seq_item");
    18              1                       1000                 start_item(seq_item);
    19                                                           assert (seq_item.randomize());
    20              1                       1000                 finish_item(seq_item);


=================================================================================
=== Instance: /alsu_reset_seq_pkg
=== Design Unit: work.alsu_reset_seq_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /alsu_reset_seq_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_reset_seq.sv
------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               1                    ***0***         `uvm_object_utils(alsu_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                          1     Count coming in to IF
    8               2                    ***0***         `uvm_object_utils(alsu_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               3                    ***0***         `uvm_object_utils(alsu_reset_seq)
    8               4                    ***0***         `uvm_object_utils(alsu_reset_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                          1     Count coming in to IF
    8               5                    ***0***         `uvm_object_utils(alsu_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               6                    ***0***         `uvm_object_utils(alsu_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_reset_seq_pkg --

  File ALSU_reset_seq.sv
----------------Focused Condition View-------------------
Line       8 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       8 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      25        17         8    68.00%

================================Statement Details================================

Statement Coverage for instance /alsu_reset_seq_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_reset_seq.sv
    1                                                package alsu_reset_seq_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                import alsu_shared_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_reset_seq extends uvm_sequence #(alsu_seq_item);
    8               1                    ***0***         `uvm_object_utils(alsu_reset_seq)
    8               2                    ***0***     
    8               3                    ***0***     
    8               4                    ***0***     
    8               5                    ***0***     
    8               6                          1     
    8               7                    ***0***     
    8               8                    ***0***     
    8               9                          1     
    8              10                    ***0***     
    9                                                    
    10                                                   alsu_seq_item seq_item;
    11                                               
    12                                                   function new(string name = "alsu_reset_seq");
    13              1                          1             super.new(name);
    14                                                   endfunction
    15                                               
    16                                                   task body();
    17              1                          1             seq_item = alsu_seq_item::type_id::create("seq_item");
    18              1                          1             start_item(seq_item);
    19              1                          1             seq_item.rst = 1;
    20              1                          1             seq_item.A = 0;
    21              1                          1             seq_item.B = 0;
    22              1                          1             seq_item.opcode = opcode_e'(0);
    23              1                          1             seq_item.cin = 0;
    24              1                          1             seq_item.red_op_A = 0;
    25              1                          1             seq_item.red_op_B = 0;
    26              1                          1             seq_item.bypass_A = 0;
    27              1                          1             seq_item.bypass_B = 0;
    28              1                          1             seq_item.direction = direction_e'(0);
    29              1                          1             seq_item.serial_in = 0;
    30              1                          1             finish_item(seq_item);


=================================================================================
=== Instance: /alsu_coverage_pkg
=== Design Unit: work.alsu_coverage_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /alsu_coverage_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_coverage.sv
------------------------------------IF Branch------------------------------------
    146                                     1001     Count coming in to IF
    146             1                       1001             if((!seq_item.rst) || (!seq_item.bypass_A) || (!seq_item.bypass_B)) begin
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         0         3     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_coverage_pkg --

  File ALSU_coverage.sv
----------------Focused Condition View-------------------
Line       146 Item    1  (~seq_item.rst || ~seq_item.bypass_A || ~seq_item.bypass_B)
Condition totals: 0 of 3 input terms covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
       seq_item.rst         N  '_1' not hit             Hit '_1'
  seq_item.bypass_A         N  '_1' not hit             Hit '_1'
  seq_item.bypass_B         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  seq_item.rst_0        -                             
  Row   2:    ***0***  seq_item.rst_1        ~(~seq_item.bypass_A || ~seq_item.bypass_B)
  Row   3:          1  seq_item.bypass_A_0   seq_item.rst                  
  Row   4:    ***0***  seq_item.bypass_A_1   (seq_item.rst && seq_item.bypass_B)
  Row   5:          1  seq_item.bypass_B_0   (seq_item.rst && seq_item.bypass_A)
  Row   6:    ***0***  seq_item.bypass_B_1   (seq_item.rst && seq_item.bypass_A)



Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses         22        na        na        na
            Covergroup Bins         76        76         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /alsu_coverage_pkg/alsu_coverage/cvg            100.00%        100          -    Covered              
    covered/total bins:                                    76         76          -                      
    missing/total bins:                                     0         76          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint ADD_MULT_A_cp                          100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_0                                      245          1          -    Covered              
        bin A_data_max                                    162          1          -    Covered              
        bin A_data_min                                    165          1          -    Covered              
        default bin A_data_default                        429                     -    Occurred             
    Coverpoint RED_A_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_walkingones[-4]                         93          1          -    Covered              
        bin A_data_walkingones[1]                          53          1          -    Covered              
        bin A_data_walkingones[2]                          48          1          -    Covered              
    Coverpoint ADD_MULT_B_cp                          100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_0                                      218          1          -    Covered              
        bin B_data_max                                    140          1          -    Covered              
        bin B_data_min                                    170          1          -    Covered              
        default bin B_data_default                        473                     -    Occurred             
    Coverpoint RED_B_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_walkingones[-4]                         55          1          -    Covered              
        bin B_data_walkingones[1]                          33          1          -    Covered              
        bin B_data_walkingones[2]                          26          1          -    Covered              
    Coverpoint opcode_cp                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin bins_invalid                           79                     -    Occurred             
        bin bins_shift[SHIFT]                             154          1          -    Covered              
        bin bins_shift[ROTATE]                            156          1          -    Covered              
        bin bins_arith[ADD]                               159          1          -    Covered              
        bin bins_arith[MULT]                              151          1          -    Covered              
        bin bins_bitwise[OR]                              143          1          -    Covered              
        bin bins_bitwise[XOR]                             159          1          -    Covered              
    Coverpoint opcode_shift_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_shift[SHIFT]                             154          1          -    Covered              
        bin bins_shift[ROTATE]                            156          1          -    Covered              
    Coverpoint opcode_arith_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_arith[ADD]                               159          1          -    Covered              
        bin bins_arith[MULT]                              151          1          -    Covered              
    Coverpoint opcode_bitwise_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_arith[OR]                                143          1          -    Covered              
        bin bins_arith[XOR]                               159          1          -    Covered              
    Coverpoint opcode_not_bitwise_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_not_bitwise[ADD]                         159          1          -    Covered              
        bin bins_not_bitwise[MULT]                        151          1          -    Covered              
        bin bins_not_bitwise[SHIFT]                       154          1          -    Covered              
        bin bins_not_bitwise[ROTATE]                      156          1          -    Covered              
        bin bins_not_bitwise[INVALID_6]                    39          1          -    Covered              
        bin bins_not_bitwise[INVALID_7]                    40          1          -    Covered              
    Coverpoint cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       503          1          -    Covered              
        bin auto[1]                                       498          1          -    Covered              
    Coverpoint direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[RIGHT]                                   494          1          -    Covered              
        bin auto[LEFT]                                    507          1          -    Covered              
    Coverpoint serial_in_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       523          1          -    Covered              
        bin auto[1]                                       478          1          -    Covered              
    Coverpoint red_op_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       521          1          -    Covered              
        bin auto[1]                                       480          1          -    Covered              
    Coverpoint red_op_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       479          1          -    Covered              
        bin auto[1]                                       522          1          -    Covered              
    Cross ADD_MULT_cross                              100.00%        100          -    Covered              
        covered/total bins:                                18         18          -                      
        missing/total bins:                                 0         18          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <A_data_min,B_data_min,bins_arith[MULT]> 
                                                           13          1          -    Covered              
            bin <A_data_min,B_data_min,bins_arith[ADD]> 
                                                            5          1          -    Covered              
            bin <A_data_max,B_data_min,bins_arith[MULT]> 
                                                            8          1          -    Covered              
            bin <A_data_max,B_data_min,bins_arith[ADD]> 
                                                           10          1          -    Covered              
            bin <A_data_0,B_data_min,bins_arith[MULT]> 
                                                            6          1          -    Covered              
            bin <A_data_0,B_data_min,bins_arith[ADD]> 
                                                           12          1          -    Covered              
            bin <A_data_min,B_data_max,bins_arith[MULT]> 
                                                           13          1          -    Covered              
            bin <A_data_min,B_data_max,bins_arith[ADD]> 
                                                            8          1          -    Covered              
            bin <A_data_max,B_data_max,bins_arith[MULT]> 
                                                            7          1          -    Covered              
            bin <A_data_max,B_data_max,bins_arith[ADD]> 
                                                            9          1          -    Covered              
            bin <A_data_0,B_data_max,bins_arith[MULT]> 
                                                           11          1          -    Covered              
            bin <A_data_0,B_data_max,bins_arith[ADD]> 
                                                           10          1          -    Covered              
            bin <A_data_min,B_data_0,bins_arith[MULT]> 
                                                            5          1          -    Covered              
            bin <A_data_min,B_data_0,bins_arith[ADD]> 
                                                           16          1          -    Covered              
            bin <A_data_max,B_data_0,bins_arith[MULT]> 
                                                            4          1          -    Covered              
            bin <A_data_max,B_data_0,bins_arith[ADD]> 
                                                           12          1          -    Covered              
            bin <A_data_0,B_data_0,bins_arith[MULT]> 
                                                           10          1          -    Covered              
            bin <A_data_0,B_data_0,bins_arith[ADD]> 
                                                           11          1          -    Covered              
    Cross ADD_cin_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[1],bins_arith[ADD]>                  79          1          -    Covered              
            bin <auto[0],bins_arith[ADD]>                  80          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_MULT                          151                     -    Occurred             
    Cross SHIFT_direction_cross                       100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[LEFT],bins_shift[SHIFT]>             77          1          -    Covered              
            bin <auto[RIGHT],bins_shift[SHIFT]>            77          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_ROTATE                        156                     -    Occurred             
    Cross SHIFT_serial_in_cross                       100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[1],bins_shift[SHIFT]>                80          1          -    Covered              
            bin <auto[0],bins_shift[SHIFT]>                74          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_ROTATE                        156                     -    Occurred             
    Cross red_op_A_cross                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <A_data_walkingones[2],B_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <A_data_walkingones[2],B_data_0,bins_arith[OR]> 
                                                            7          1          -    Covered              
            bin <A_data_walkingones[1],B_data_0,bins_arith[XOR]> 
                                                           13          1          -    Covered              
            bin <A_data_walkingones[1],B_data_0,bins_arith[OR]> 
                                                            3          1          -    Covered              
            bin <A_data_walkingones[-4],B_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <A_data_walkingones[-4],B_data_0,bins_arith[OR]> 
                                                           11          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin B_data_min                           7                     -    Occurred             
            ignore_bin B_data_max                           2                     -    Occurred             
    Cross red_op_B_cross                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <B_data_walkingones[2],A_data_0,bins_arith[XOR]> 
                                                           10          1          -    Covered              
            bin <B_data_walkingones[2],A_data_0,bins_arith[OR]> 
                                                            6          1          -    Covered              
            bin <B_data_walkingones[1],A_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[1],A_data_0,bins_arith[OR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[-4],A_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[-4],A_data_0,bins_arith[OR]> 
                                                           13          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin A_data_min                           0                     -    ZERO                 
            ignore_bin A_data_max                           0                     -    ZERO                 
    Cross invalid_red_op_A_cross [2]                    0.00%        100          -    ZERO                 
        covered/total bins:                                 0          0          -                      
        missing/total bins:                                 0          0          -                      
        % Hit:                                        100.00%        100          -                      
        Illegal and Ignore Bins:
            ignore_bin red_op_A_0                         355                     -    Occurred             
            illegal_bin red_op_A_1                        344                     -    Occurred             
    Cross invalid_red_op_B_cross [2]                    0.00%        100          -    ZERO                 
        covered/total bins:                                 0          0          -                      
        missing/total bins:                                 0          0          -                      
        % Hit:                                        100.00%        100          -                      
        Illegal and Ignore Bins:
            ignore_bin red_op_B_0                         327                     -    Occurred             
            illegal_bin red_op_B_1                        372                     -    Occurred             
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        13         2    86.66%

================================Statement Details================================

Statement Coverage for instance /alsu_coverage_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_coverage.sv
    1                                                package alsu_coverage_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                import alsu_shared_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_coverage extends uvm_component;
    8               1                    ***0***         `uvm_component_utils(alsu_coverage)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                   uvm_analysis_export #(alsu_seq_item) analysis_export;
    11                                                   uvm_tlm_analysis_fifo #(alsu_seq_item) analysis_fifo;
    12                                                   alsu_seq_item seq_item;
    13                                               
    14                                                   covergroup cvg;
    15                                                       ADD_MULT_A_cp: coverpoint seq_item.A{
    16                                                           bins A_data_0 = {0};
    17                                                           bins A_data_max = {MAXPOS};
    18                                                           bins A_data_min = {MAXNEG};
    19                                                           bins A_data_default = default;
    20                                                       }
    21                                               
    22                                                       RED_A_cp: coverpoint seq_item.A iff (seq_item.red_op_A){
    23                                                           bins A_data_walkingones[] = {3'sb001,3'sb010,3'sb100};
    24                                                       }
    25                                               
    26                                                       ADD_MULT_B_cp: coverpoint seq_item.B{
    27                                                           bins B_data_0 = {0};
    28                                                           bins B_data_max = {MAXPOS};
    29                                                           bins B_data_min = {MAXNEG};
    30                                                           bins B_data_default = default;
    31                                                       }
    32                                               
    33                                                       RED_B_cp: coverpoint seq_item.B iff (seq_item.red_op_B && (!seq_item.red_op_A)){
    34                                                           bins B_data_walkingones[] = {3'sb001,3'sb010,3'sb100};
    35                                                       }
    36                                               
    37                                                       opcode_cp: coverpoint seq_item.opcode{
    38                                                           bins bins_shift[] = {SHIFT, ROTATE};
    39                                                           bins bins_arith[] = {ADD, MULT};
    40                                                           bins bins_bitwise[] = {OR, XOR};
    41                                                           illegal_bins bins_invalid = {INVALID_6, INVALID_7};
    42                                                       }
    43                                               
    44                                                       opcode_shift_cp: coverpoint seq_item.opcode{
    45                                                           option.weight = 0;
    46                                                           bins bins_shift[] = {SHIFT, ROTATE};
    47                                                       }
    48                                               
    49                                                       opcode_arith_cp: coverpoint seq_item.opcode{
    50                                                           option.weight = 0;
    51                                                           bins bins_arith[] = {ADD, MULT};
    52                                                       }
    53                                               
    54                                                       opcode_bitwise_cp: coverpoint seq_item.opcode{
    55                                                           option.weight = 0;
    56                                                           bins bins_arith[] = {OR, XOR};
    57                                                       }
    58                                               
    59                                                       opcode_not_bitwise_cp: coverpoint seq_item.opcode{
    60                                                           option.weight = 0;
    61                                                           bins bins_not_bitwise[] = {[ADD:$]};
    62                                                       }
    63                                               
    64                                                       cin_cp: coverpoint seq_item.cin{
    65                                                           option.weight = 0;
    66                                                       }
    67                                               
    68                                                       direction_cp: coverpoint seq_item.direction{
    69                                                           option.weight = 0;
    70                                                       }
    71                                               
    72                                                       serial_in_cp: coverpoint seq_item.serial_in{
    73                                                           option.weight = 0;
    74                                                       }
    75                                               
    76                                                       red_op_A_cp: coverpoint seq_item.red_op_A{
    77                                                           option.weight = 0;
    78                                                       }
    79                                               
    80                                                       red_op_B_cp: coverpoint seq_item.red_op_B{
    81                                                           option.weight = 0;
    82                                                       }
    83                                               
    84                                                       ADD_MULT_cross: cross ADD_MULT_A_cp, ADD_MULT_B_cp, opcode_arith_cp;
    85                                                       
    86                                                       ADD_cin_cross: cross cin_cp, opcode_arith_cp{
    87                                                           ignore_bins bins_MULT = binsof(opcode_arith_cp) intersect {MULT};
    88                                                       }
    89                                                       
    90                                                       SHIFT_direction_cross: cross direction_cp, opcode_shift_cp{
    91                                                           ignore_bins bins_ROTATE = binsof(opcode_shift_cp) intersect {ROTATE};
    92                                                       } 
    93                                               
    94                                                       SHIFT_serial_in_cross: cross serial_in_cp, opcode_shift_cp{
    95                                                           ignore_bins bins_ROTATE = binsof(opcode_shift_cp) intersect {ROTATE};
    96                                                       } 
    97                                                       
    98                                                       red_op_A_cross: cross RED_A_cp, ADD_MULT_B_cp, opcode_bitwise_cp iff (seq_item.red_op_A){
    99                                                           ignore_bins B_data_max = binsof(ADD_MULT_B_cp.B_data_max);
    100                                                          ignore_bins B_data_min = binsof(ADD_MULT_B_cp.B_data_min);
    101                                                      }
    102                                              
    103                                                      red_op_B_cross: cross RED_B_cp, ADD_MULT_A_cp, opcode_bitwise_cp iff (seq_item.red_op_B && (!seq_item.red_op_A)){
    104                                                          ignore_bins A_data_max = binsof(ADD_MULT_A_cp.A_data_max);
    105                                                          ignore_bins A_data_min = binsof(ADD_MULT_A_cp.A_data_min);
    106                                                      }
    107                                              
    108                                                      invalid_red_op_A_cross: cross red_op_A_cp, opcode_not_bitwise_cp{
    109                                                          ignore_bins red_op_A_0 = binsof(red_op_A_cp) intersect {0};
    110                                                          illegal_bins red_op_A_1 = binsof(red_op_A_cp) intersect {1};
    111                                                      }
    112                                              
    113                                                      invalid_red_op_B_cross: cross red_op_B_cp, opcode_not_bitwise_cp{
    114                                                          ignore_bins red_op_B_0 = binsof(red_op_B_cp) intersect {0};
    115                                                          illegal_bins red_op_B_1 = binsof(red_op_B_cp) intersect {1};
    116                                                      }
    117                                                  endgroup
    118                                              
    119                                                  function new(string name = "alsu_coverage", uvm_component parent = null);
    120             1                          1             super.new(name, parent);
    121             1                          1             cvg = new();
    122                                                  endfunction
    123                                              
    124                                                  function void build_phase(uvm_phase phase);
    125             1                          1             super.build_phase(phase);
    126                                              
    127             1                          1             analysis_export = new("analysis_export", this);
    128             1                          1             analysis_fifo = new("analysis_fifo", this);
    129                                                  endfunction
    130                                              
    131                                                  function void connect_phase(uvm_phase phase);
    132             1                          1             super.connect_phase(phase);
    133                                                      
    134             1                          1             analysis_export.connect(analysis_fifo.analysis_export);
    135                                                  endfunction
    136                                              
    137                                                  task run_phase(uvm_phase phase);
    138             1                          1             super.run_phase(phase);
    139             1                          1             forever begin
    140             1                       1002                 analysis_fifo.get(seq_item);
    141             1                       1001                 sample_cvg(seq_item);
    142                                                      end
    143                                                  endtask
    144                                              
    145                                                  task sample_cvg(alsu_seq_item seq_item);
    146                                                      if((!seq_item.rst) || (!seq_item.bypass_A) || (!seq_item.bypass_B)) begin
    147             1                       1001                 cvg.sample();


=================================================================================
=== Instance: /alsu_scoreboard_pkg
=== Design Unit: work.alsu_scoreboard_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        42        35         7    83.33%

================================Branch Details================================

Branch Coverage for instance /alsu_scoreboard_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_scoreboard.sv
------------------------------------IF Branch------------------------------------
    58                                      1001     Count coming in to IF
    58              1                    ***0***             if ((out_ref !== seq_item.out) || (leds_ref !== seq_item.leds)) begin
    61              1                       1001             end else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    59                                   ***0***     Count coming in to IF
    59              1                    ***0***                 `uvm_error("RUN_PHASE", $sformatf("Comparsion failed, Transaction received from DUT: %s While the reference out = 0b%0b, leds = 0x%0h ", seq_item.convert2string(), out_ref, leds_ref));
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    62                                      1001     Count coming in to IF
    62              1                    ***0***                 `uvm_info("RUN_PHASE", $sformatf("Comparsion successed, Transaction received from DUT: %s ", seq_item.convert2string()), UVM_HIGH);
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    74                                      1001     Count coming in to IF
    74              1                         52             if (seq_item.rst) begin
    76              1                        949             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    77                                       949     Count coming in to IF
    77              1                        488                 if (invalid) begin
    79              1                        461                 end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    84                                      1001     Count coming in to IF
    84              1                         52             if (seq_item.rst) begin
    86              1                        949             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    87                                       949     Count coming in to IF
    87              1                          2                 if (bypass_A_reg && bypass_B_reg) begin
    89              1                         44                 end else if (bypass_A_reg) begin
    91              1                         40                 end else if (bypass_B_reg) begin
    93              1                        445                 end else if (invalid) begin
    95              1                        418                 end else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    96                                       418     Count coming in to CASE
    97              1                        165                         OR: begin
    108             1                        123                         XOR: begin
    119             1                         33                         ADD: begin
    126             1                         31                         MULT: out_ref = A_reg * B_reg;
    127             1                         32                         SHIFT: begin
    134             1                         34                         ROTATE: begin
    141             1                    ***0***                         default: out_ref = out_ref;
Branch totals: 6 hits of 7 branches = 85.71%

------------------------------------IF Branch------------------------------------
    98                                       165     Count coming in to IF
    98              1                         23                             if (red_op_A_reg && red_op_B_reg) begin
    100             1                         25                             end else if (red_op_A_reg) begin
    102             1                         32                             end else if (red_op_B_reg) begin
    104             1                         85                             end else begin
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    109                                      123     Count coming in to IF
    109             1                         30                             if (red_op_A_reg && red_op_B_reg) begin
    111             1                         28                             end else if (red_op_A_reg) begin
    113             1                         29                             end else if (red_op_B_reg) begin
    115             1                         36                             end else begin
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    128                                       32     Count coming in to IF
    128             1                         14                             if (direction_reg) begin
    130             1                         18                             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    135                                       34     Count coming in to IF
    135             1                         16                             if (direction_reg) begin
    137             1                         18                             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    146                                     1001     Count coming in to IF
    146             1                         52             if (seq_item.rst) begin
    157             1                        949             end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    173                                        1     Count coming in to IF
    173             1                          1             `uvm_info("REPORT_PHASE", $sformatf("Total successful transactions: %0d ", correct_count), UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    174                                        1     Count coming in to IF
    174             1                          1             `uvm_info("REPORT_PHASE", $sformatf("Total failed transactions: %0d ", error_count), UVM_MEDIUM);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         6         2    75.00%

================================Condition Details================================

Condition Coverage for instance /alsu_scoreboard_pkg --

  File ALSU_scoreboard.sv
----------------Focused Condition View-------------------
Line       58 Item    1  ((this.out_ref !== seq_item.out) || (this.leds_ref !== seq_item.leds))
Condition totals: 0 of 2 input terms covered = 0.00%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
    (this.out_ref !== seq_item.out)         N  '_1' not hit             Hit '_1'
  (this.leds_ref !== seq_item.leds)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:          1  (this.out_ref !== seq_item.out)_0    ~(this.leds_ref !== seq_item.leds)
  Row   2:    ***0***  (this.out_ref !== seq_item.out)_1    -                             
  Row   3:          1  (this.leds_ref !== seq_item.leds)_0  ~(this.out_ref !== seq_item.out)
  Row   4:    ***0***  (this.leds_ref !== seq_item.leds)_1  ~(this.out_ref !== seq_item.out)

----------------Focused Condition View-------------------
Line       87 Item    1  (this.bypass_A_reg && this.bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  this.bypass_A_reg         Y
  this.bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.bypass_A_reg_0   -                             
  Row   2:          1  this.bypass_A_reg_1   this.bypass_B_reg             
  Row   3:          1  this.bypass_B_reg_0   this.bypass_A_reg             
  Row   4:          1  this.bypass_B_reg_1   this.bypass_A_reg             

----------------Focused Condition View-------------------
Line       98 Item    1  (this.red_op_A_reg && this.red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  this.red_op_A_reg         Y
  this.red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.red_op_A_reg_0   -                             
  Row   2:          1  this.red_op_A_reg_1   this.red_op_B_reg             
  Row   3:          1  this.red_op_B_reg_0   this.red_op_A_reg             
  Row   4:          1  this.red_op_B_reg_1   this.red_op_A_reg             

----------------Focused Condition View-------------------
Line       109 Item    1  (this.red_op_A_reg && this.red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  this.red_op_A_reg         Y
  this.red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.red_op_A_reg_0   -                             
  Row   2:          1  this.red_op_A_reg_1   this.red_op_B_reg             
  Row   3:          1  this.red_op_B_reg_0   this.red_op_A_reg             
  Row   4:          1  this.red_op_B_reg_1   this.red_op_A_reg             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /alsu_scoreboard_pkg --

  File ALSU_scoreboard.sv
----------------Focused Expression View-----------------
Line       70 Item    1  ((this.red_op_A_reg | this.red_op_B_reg) & (this.opcode_reg[1] | this.opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
   this.red_op_A_reg         Y
   this.red_op_B_reg         Y
  this.opcode_reg[1]         Y
  this.opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.red_op_A_reg_0   ((this.opcode_reg[1] | this.opcode_reg[2]) && ~this.red_op_B_reg)
  Row   2:          1  this.red_op_A_reg_1   ((this.opcode_reg[1] | this.opcode_reg[2]) && ~this.red_op_B_reg)
  Row   3:          1  this.red_op_B_reg_0   ((this.opcode_reg[1] | this.opcode_reg[2]) && ~this.red_op_A_reg)
  Row   4:          1  this.red_op_B_reg_1   ((this.opcode_reg[1] | this.opcode_reg[2]) && ~this.red_op_A_reg)
  Row   5:          1  this.opcode_reg[1]_0  ((this.red_op_A_reg | this.red_op_B_reg) && ~this.opcode_reg[2])
  Row   6:          1  this.opcode_reg[1]_1  ((this.red_op_A_reg | this.red_op_B_reg) && ~this.opcode_reg[2])
  Row   7:          1  this.opcode_reg[2]_0  ((this.red_op_A_reg | this.red_op_B_reg) && ~this.opcode_reg[1])
  Row   8:          1  this.opcode_reg[2]_1  ((this.red_op_A_reg | this.red_op_B_reg) && ~this.opcode_reg[1])

----------------Focused Expression View-----------------
Line       71 Item    1  (this.opcode_reg[1] & this.opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

          Input Term   Covered  Reason for no coverage   Hint
         -----------  --------  -----------------------  --------------
  this.opcode_reg[1]         Y
  this.opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  this.opcode_reg[1]_0  this.opcode_reg[2]            
  Row   2:          1  this.opcode_reg[1]_1  this.opcode_reg[2]            
  Row   3:          1  this.opcode_reg[2]_0  this.opcode_reg[1]            
  Row   4:          1  this.opcode_reg[2]_1  this.opcode_reg[1]            

----------------Focused Expression View-----------------
Line       72 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      70        64         6    91.42%

================================Statement Details================================

Statement Coverage for instance /alsu_scoreboard_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_scoreboard.sv
    1                                                package alsu_scoreboard_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                import alsu_shared_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_scoreboard extends uvm_scoreboard;
    8               1                    ***0***         `uvm_component_utils(alsu_scoreboard)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                   uvm_analysis_export #(alsu_seq_item) analysis_export;
    11                                                   uvm_tlm_analysis_fifo #(alsu_seq_item) analysis_fifo;
    12                                                   alsu_seq_item seq_item;
    13                                                   
    14                                                   logic cin_reg;
    15                                                   logic red_op_A_reg;
    16                                                   logic red_op_B_reg;
    17                                                   logic bypass_A_reg;
    18                                                   logic bypass_B_reg;
    19                                                   direction_e direction_reg;
    20                                                   logic serial_in_reg;
    21                                                   opcode_e opcode_reg;
    22                                                   logic signed [2:0] A_reg;
    23                                                   logic signed [2:0] B_reg;
    24                                                   logic [15:0] leds_ref;
    25                                                   logic signed [5:0] out_ref;
    26                                               
    27              1                          1         int error_count = 0;
    28              1                          1         int correct_count = 0;
    29                                               
    30                                                   function new(string name = "alsu_scoreboard", uvm_component parent = null);
    31              1                          1             super.new(name, parent);
    32                                                   endfunction
    33                                               
    34                                                   function void build_phase(uvm_phase phase);
    35              1                          1             super.build_phase(phase);
    36                                               
    37              1                          1             analysis_export = new("analysis_export", this);
    38              1                          1             analysis_fifo = new("analysis_fifo", this);
    39                                                   endfunction
    40                                                   
    41                                                   function void connect_phase(uvm_phase phase);
    42              1                          1             super.connect_phase(phase);
    43                                                       
    44              1                          1             analysis_export.connect(analysis_fifo.analysis_export);
    45                                                   endfunction
    46                                               
    47                                                   task run_phase(uvm_phase phase);
    48              1                          1             super.run_phase(phase);
    49              1                          1             forever begin
    50              1                       1002                 seq_item = alsu_seq_item::type_id::create("seq_item");
    51              1                       1002                 analysis_fifo.get(seq_item);
    52              1                       1001                 ref_model(seq_item);
    53              1                       1001                 check_result(seq_item);
    54                                                       end
    55                                                   endtask
    56                                               
    57                                                   task check_result(alsu_seq_item seq_item);
    58                                                       if ((out_ref !== seq_item.out) || (leds_ref !== seq_item.leds)) begin
    59              1                    ***0***                 `uvm_error("RUN_PHASE", $sformatf("Comparsion failed, Transaction received from DUT: %s While the reference out = 0b%0b, leds = 0x%0h ", seq_item.convert2string(), out_ref, leds_ref));
    60              1                    ***0***                 error_count++;
    61                                                       end else begin
    62              1                    ***0***                 `uvm_info("RUN_PHASE", $sformatf("Comparsion successed, Transaction received from DUT: %s ", seq_item.convert2string()), UVM_HIGH);
    63              1                       1001                 correct_count++;
    64                                                       end
    65                                                   endtask
    66                                               
    67                                                   task ref_model(alsu_seq_item seq_item);    
    68                                                       logic invalid_red_op, invalid_opcode, invalid;
    69                                               
    70              1                       1001             invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    71              1                       1001             invalid_opcode = opcode_reg[1] & opcode_reg[2];
    72              1                       1001             invalid        = invalid_red_op | invalid_opcode;
    73                                               
    74                                                       if (seq_item.rst) begin
    75              1                         52                 leds_ref = 16'h0;
    76                                                       end else begin
    77                                                           if (invalid) begin
    78              1                        488                     leds_ref = ~leds_ref;
    79                                                           end else begin
    80              1                        461                     leds_ref = 16'h0;
    81                                                           end
    82                                                       end
    83                                               
    84                                                       if (seq_item.rst) begin
    85              1                         52                 out_ref = 0;
    86                                                       end else begin
    87                                                           if (bypass_A_reg && bypass_B_reg) begin
    88              1                          2                     out_ref = (INPUT_PRIORITY == "A") ? A_reg : B_reg;
    89                                                           end else if (bypass_A_reg) begin
    90              1                         44                     out_ref = A_reg;
    91                                                           end else if (bypass_B_reg) begin
    92              1                         40                     out_ref = B_reg;
    93                                                           end else if (invalid) begin
    94              1                        445                     out_ref = 0;
    95                                                           end else begin
    96                                                               case (opcode_reg)
    97                                                                   OR: begin
    98                                                                       if (red_op_A_reg && red_op_B_reg) begin
    99              1                         23                                 out_ref = (INPUT_PRIORITY == "A") ? (|A_reg) : (|B_reg);
    100                                                                      end else if (red_op_A_reg) begin
    101             1                         25                                 out_ref = |A_reg;
    102                                                                      end else if (red_op_B_reg) begin
    103             1                         32                                 out_ref = |B_reg;
    104                                                                      end else begin
    105             1                         85                                 out_ref = A_reg | B_reg;
    106                                                                      end
    107                                                                  end
    108                                                                  XOR: begin
    109                                                                      if (red_op_A_reg && red_op_B_reg) begin
    110             1                         30                                 out_ref = (INPUT_PRIORITY == "A") ? (^A_reg) : (^B_reg);
    111                                                                      end else if (red_op_A_reg) begin
    112             1                         28                                 out_ref = ^A_reg;
    113                                                                      end else if (red_op_B_reg) begin
    114             1                         29                                 out_ref = ^B_reg;
    115                                                                      end else begin
    116             1                         36                                 out_ref = A_reg ^ B_reg;
    117                                                                      end
    118                                                                  end
    119                                                                  ADD: begin
    120                                                                      if (FULL_ADDER == "ON") begin 
    121             1                         33                                 out_ref = A_reg + B_reg + cin_reg;
    122                                                                      end else begin
    123                                                                          out_ref = A_reg + B_reg;
    124                                                                      end
    125                                                                  end
    126             1                         31                         MULT: out_ref = A_reg * B_reg;
    127                                                                  SHIFT: begin
    128                                                                      if (direction_reg) begin
    129             1                         14                                 out_ref = {out_ref[4:0], serial_in_reg};
    130                                                                      end else begin
    131             1                         18                                 out_ref = {serial_in_reg, out_ref[5:1]};
    132                                                                      end
    133                                                                  end
    134                                                                  ROTATE: begin
    135                                                                      if (direction_reg) begin
    136             1                         16                                 out_ref = {out_ref[4:0], out_ref[5]};
    137                                                                      end else begin
    138             1                         18                                 out_ref = {out_ref[0], out_ref[5:1]};
    139                                                                      end
    140                                                                  end
    141             1                    ***0***                         default: out_ref = out_ref;
    142                                                              endcase
    143                                                          end
    144                                                      end
    145                                              
    146                                                      if (seq_item.rst) begin
    147             1                         52                 cin_reg = 0;
    148             1                         52                 red_op_A_reg = 0;
    149             1                         52                 red_op_B_reg = 0;
    150             1                         52                 bypass_A_reg = 0;
    151             1                         52                 bypass_B_reg = 0;
    152             1                         52                 direction_reg = direction_e'(0);
    153             1                         52                 serial_in_reg = 0;
    154             1                         52                 opcode_reg = opcode_e'(0);
    155             1                         52                 A_reg = 0;
    156             1                         52                 B_reg = 0;
    157                                                      end else begin
    158             1                        949                 cin_reg = seq_item.cin;
    159             1                        949                 red_op_A_reg = seq_item.red_op_A;
    160             1                        949                 red_op_B_reg = seq_item.red_op_B;
    161             1                        949                 bypass_A_reg = seq_item.bypass_A;
    162             1                        949                 bypass_B_reg = seq_item.bypass_B;
    163             1                        949                 direction_reg = seq_item.direction;
    164             1                        949                 serial_in_reg = seq_item.serial_in;
    165             1                        949                 opcode_reg = seq_item.opcode;
    166             1                        949                 A_reg = seq_item.A;
    167             1                        949                 B_reg = seq_item.B;
    168                                                      end
    169                                                  endtask
    170                                                  
    171                                                  function void report_phase(uvm_phase phase);
    172             1                          1             super.report_phase(phase);
    173             1                          1             `uvm_info("REPORT_PHASE", $sformatf("Total successful transactions: %0d ", correct_count), UVM_MEDIUM);
    174             1                          1             `uvm_info("REPORT_PHASE", $sformatf("Total failed transactions: %0d ", error_count), UVM_MEDIUM);


=================================================================================
=== Instance: /alsu_config_pkg
=== Design Unit: work.alsu_config_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /alsu_config_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_config.sv
------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***         `uvm_object_utils(alsu_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               2                    ***0***         `uvm_object_utils(alsu_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***         `uvm_object_utils(alsu_config)
    6               4                    ***0***         `uvm_object_utils(alsu_config)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               5                    ***0***         `uvm_object_utils(alsu_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***         `uvm_object_utils(alsu_config)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_config_pkg --

  File ALSU_config.sv
----------------Focused Condition View-------------------
Line       6 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       6 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /alsu_config_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_config.sv
    1                                                package alsu_config_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                
    5                                                class alsu_config extends uvm_object;
    6               1                    ***0***         `uvm_object_utils(alsu_config)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                    ***0***     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                    ***0***     
    6              10                    ***0***     
    7                                                
    8                                                    virtual alsu_if alsu_vif;
    9                                                
    10                                                   function new(string name = "alsu_config");
    11              1                          1             super.new(name);


=================================================================================
=== Instance: /alsu_monitor_pkg
=== Design Unit: work.alsu_monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /alsu_monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_monitor.sv
------------------------------------IF Branch------------------------------------
    44                                      1001     Count coming in to IF
    44              1                    ***0***                 `uvm_info("RUN_PHASE", seq_item.convert2string(), UVM_HIGH)
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      25        22         3    88.00%

================================Statement Details================================

Statement Coverage for instance /alsu_monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_monitor.sv
    1                                                package alsu_monitor_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                import alsu_shared_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_monitor extends uvm_monitor;
    8               1                    ***0***         `uvm_component_utils(alsu_monitor)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                   virtual alsu_if alsu_vif;
    11                                                   alsu_seq_item seq_item;
    12                                                   uvm_analysis_port #(alsu_seq_item) analysis_port;
    13                                               
    14                                                   function new(string name = "alsu_monitor", uvm_component parent = null);
    15              1                          1             super.new(name, parent);
    16                                                   endfunction
    17                                               
    18                                                   function void build_phase(uvm_phase phase);
    19              1                          1             super.build_phase(phase);
    20                                               
    21              1                          1             analysis_port = new("analysis_port", this);
    22                                                   endfunction
    23                                               
    24                                                   task run_phase(uvm_phase phase);
    25              1                          1             super.run_phase(phase);
    26              1                          1             forever begin
    27              1                       1002                 seq_item = alsu_seq_item::type_id::create("seq_item");
    28              1                       1002                 @(negedge alsu_vif.clk);
    29              1                       1001                 seq_item.rst = alsu_vif.rst;
    30              1                       1001                 seq_item.A = alsu_vif.A;
    31              1                       1001                 seq_item.B = alsu_vif.B;
    32              1                       1001                 seq_item.opcode = opcode_e'(alsu_vif.opcode);
    33              1                       1001                 seq_item.cin = alsu_vif.cin;
    34              1                       1001                 seq_item.red_op_A = alsu_vif.red_op_A;
    35              1                       1001                 seq_item.red_op_B = alsu_vif.red_op_B;
    36              1                       1001                 seq_item.bypass_A = alsu_vif.bypass_A;
    37              1                       1001                 seq_item.bypass_B = alsu_vif.bypass_B;
    38              1                       1001                 seq_item.direction = direction_e'(alsu_vif.direction);
    39              1                       1001                 seq_item.serial_in = alsu_vif.serial_in;
    40              1                       1001                 seq_item.out = alsu_vif.out;
    41              1                       1001                 seq_item.leds = alsu_vif.leds;
    42                                                           
    43              1                       1001                 analysis_port.write(seq_item);
    44              1                    ***0***                 `uvm_info("RUN_PHASE", seq_item.convert2string(), UVM_HIGH)


=================================================================================
=== Instance: /alsu_driver_pkg
=== Design Unit: work.alsu_driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /alsu_driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_driver.sv
------------------------------------IF Branch------------------------------------
    35                                      1001     Count coming in to IF
    35              1                    ***0***                 `uvm_info("RUN_PHASE", seq_item.convert2string_stimulus(), UVM_HIGH)
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        19         3    86.36%

================================Statement Details================================

Statement Coverage for instance /alsu_driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_driver.sv
    1                                                package alsu_driver_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                import alsu_shared_pkg::*;
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_driver extends uvm_driver #(alsu_seq_item);
    8               1                    ***0***         `uvm_component_utils(alsu_driver)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                   virtual alsu_if alsu_vif;
    11                                                   alsu_seq_item seq_item;
    12                                               
    13                                                   function new(string name = "alsu_driver", uvm_component parent = null);
    14              1                          1             super.new(name, parent);
    15                                                   endfunction
    16                                               
    17                                                   task run_phase(uvm_phase phase);
    18              1                          1             super.run_phase(phase);
    19              1                          1             forever begin
    20              1                       1002                 seq_item = alsu_seq_item::type_id::create("seq_item");
    21              1                       1002                 seq_item_port.get_next_item(seq_item);
    22              1                       1001                 alsu_vif.rst = seq_item.rst;
    23              1                       1001                 alsu_vif.A = seq_item.A;
    24              1                       1001                 alsu_vif.B = seq_item.B;
    25              1                       1001                 alsu_vif.opcode = opcode_e'(seq_item.opcode);
    26              1                       1001                 alsu_vif.cin = seq_item.cin;
    27              1                       1001                 alsu_vif.red_op_A = seq_item.red_op_A;
    28              1                       1001                 alsu_vif.red_op_B = seq_item.red_op_B;
    29              1                       1001                 alsu_vif.bypass_A = seq_item.bypass_A;
    30              1                       1001                 alsu_vif.bypass_B = seq_item.bypass_B;
    31              1                       1001                 alsu_vif.direction = direction_e'(seq_item.direction);
    32              1                       1001                 alsu_vif.serial_in = seq_item.serial_in;
    33              1                       1001                 @(negedge alsu_vif.clk);
    34              1                       1001                 seq_item_port.item_done();
    35              1                    ***0***                 `uvm_info("RUN_PHASE", seq_item.convert2string_stimulus(), UVM_HIGH)


=================================================================================
=== Instance: /alsu_sequencer_pkg
=== Design Unit: work.alsu_sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         2         2    50.00%

================================Statement Details================================

Statement Coverage for instance /alsu_sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequencer.sv
    1                                                package alsu_sequencer_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_seq_item_pkg::*;
    4                                                
    5                                                `include "uvm_macros.svh"
    6                                                
    7                                                class alsu_sequencer extends uvm_sequencer #(alsu_seq_item);
    8               1                    ***0***         `uvm_component_utils(alsu_sequencer)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                                   function new(string name = "alsu_sequencer", uvm_component parent = null);
    11              1                          1             super.new(name, parent);


=================================================================================
=== Instance: /alsu_agent_pkg
=== Design Unit: work.alsu_agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         1         3    25.00%

================================Branch Details================================

Branch Coverage for instance /alsu_agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_agent.sv
------------------------------------IF Branch------------------------------------
    26                                         1     Count coming in to IF
    26              1                    ***0***             if (!uvm_config_db #(alsu_config)::get(this, "", "CFG", alsu_cfg)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    27                                   ***0***     Count coming in to IF
    27              1                    ***0***                 `uvm_fatal("BUILD_PHASE", "Agent - Unable to get the configuration abject")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        11         3    78.57%

================================Statement Details================================

Statement Coverage for instance /alsu_agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_agent.sv
    1                                                package alsu_agent_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_sequencer_pkg::*;
    4                                                import alsu_seq_item_pkg::*;
    5                                                import alsu_driver_pkg::*;
    6                                                import alsu_monitor_pkg::*;
    7                                                import alsu_config_pkg::*;
    8                                                `include "uvm_macros.svh"
    9                                                
    10                                               class alsu_agent extends uvm_agent;
    11              1                    ***0***         `uvm_component_utils(alsu_agent)
    11              2                    ***0***     
    11              3                          2     
    12                                               
    13                                                   alsu_sequencer sequencer;
    14                                                   alsu_driver driver;
    15                                                   alsu_monitor monitor;
    16                                                   alsu_config alsu_cfg;
    17                                                   uvm_analysis_port #(alsu_seq_item) analysis_port;
    18                                               
    19                                                   function new(string name = "alsu_agent", uvm_component parent = null);
    20              1                          1             super.new(name, parent);
    21                                                   endfunction
    22                                                   
    23                                                   function void build_phase(uvm_phase phase);
    24              1                          1             super.build_phase(phase);
    25                                               
    26                                                       if (!uvm_config_db #(alsu_config)::get(this, "", "CFG", alsu_cfg)) begin
    27              1                    ***0***                 `uvm_fatal("BUILD_PHASE", "Agent - Unable to get the configuration abject")
    28                                                       end
    29                                               
    30              1                          1             sequencer = alsu_sequencer::type_id::create("sequencer", this);
    31              1                          1             driver = alsu_driver::type_id::create("driver", this);
    32              1                          1             monitor = alsu_monitor::type_id::create("monitor", this);
    33                                               
    34              1                          1             analysis_port = new("analysis_port", this);
    35                                                   endfunction
    36                                               
    37                                                   function void connect_phase(uvm_phase phase);
    38              1                          1             driver.alsu_vif = alsu_cfg.alsu_vif;
    39              1                          1             monitor.alsu_vif = alsu_cfg.alsu_vif;
    40                                               
    41              1                          1             driver.seq_item_port.connect(sequencer.seq_item_export);
    42              1                          1             monitor.analysis_port.connect(analysis_port);


=================================================================================
=== Instance: /alsu_env_pkg
=== Design Unit: work.alsu_env_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10         8         2    80.00%

================================Statement Details================================

Statement Coverage for instance /alsu_env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_env.sv
    1                                                package alsu_env_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_agent_pkg::*;
    4                                                import alsu_scoreboard_pkg::*;
    5                                                import alsu_coverage_pkg::*;
    6                                                `include "uvm_macros.svh"
    7                                                
    8                                                class alsu_env extends uvm_env;
    9               1                    ***0***         `uvm_component_utils(alsu_env)
    9               2                    ***0***     
    9               3                          2     
    10                                               
    11                                                   alsu_agent agent;
    12                                                   alsu_scoreboard scoreboard;
    13                                                   alsu_coverage coverage;
    14                                               
    15                                                   function new(string name = "alsu_env", uvm_component parent = null);
    16              1                          1             super.new(name, parent);
    17                                                   endfunction
    18                                                   
    19                                                   function void build_phase(uvm_phase phase);
    20              1                          1             super.build_phase(phase);
    21                                               
    22              1                          1             agent = alsu_agent::type_id::create("agent", this);
    23              1                          1             scoreboard = alsu_scoreboard::type_id::create("scoreboard", this);
    24              1                          1             coverage = alsu_coverage::type_id::create("coverage", this);
    25                                                   endfunction
    26                                               
    27                                                   function void connect_phase(uvm_phase phase);
    28              1                          1             agent.analysis_port.connect(scoreboard.analysis_export);
    29              1                          1             agent.analysis_port.connect(coverage.analysis_export);


=================================================================================
=== Instance: /alsu_test_pkg
=== Design Unit: work.alsu_test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        12         5         7    41.66%

================================Branch Details================================

Branch Coverage for instance /alsu_test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_test.sv
------------------------------------IF Branch------------------------------------
    29                                         1     Count coming in to IF
    29              1                    ***0***             if (!uvm_config_db #(virtual alsu_if)::get(this, "", "ALSU_VIF", alsu_cfg.alsu_vif)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    30                                   ***0***     Count coming in to IF
    30              1                    ***0***                 `uvm_fatal("BUILD_PHASE", "Test - Unable to get virtual interface of the ALSU")
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    42                                         1     Count coming in to IF
    42              1                          1             `uvm_info("RUN_PHASE", "Reset Asserted", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    43                                         1     Count coming in to IF
    43              1                          1             `uvm_info("RUN_PHASE", "Reset Deasserted", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    46                                         1     Count coming in to IF
    46              1                          1             `uvm_info("RUN_PHASE", "Stimulus Generation Started", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    48                                         1     Count coming in to IF
    48              1                          1             `uvm_info("RUN_PHASE", "Stimulus Generation Ended", UVM_LOW)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        17         3    85.00%

================================Statement Details================================

Statement Coverage for instance /alsu_test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_test.sv
    1                                                package alsu_test_pkg;
    2                                                import uvm_pkg::*;
    3                                                import alsu_env_pkg::*;
    4                                                import alsu_config_pkg::*;
    5                                                import alsu_reset_seq_pkg::*;
    6                                                import alsu_main_seq_pkg::*;
    7                                                `include "uvm_macros.svh"
    8                                                
    9                                                class alsu_test extends uvm_test;
    10              1                    ***0***         `uvm_component_utils(alsu_test)
    10              2                    ***0***     
    10              3                          4     
    11                                               
    12                                                   alsu_env env;
    13                                                   alsu_config alsu_cfg;
    14                                                   alsu_reset_seq reset_seq;
    15                                                   alsu_main_seq main_seq;
    16                                               
    17                                                   function new(string name = "alsu_test", uvm_component parent = null);
    18              1                          1             super.new(name, parent);
    19                                                   endfunction
    20                                               
    21                                                   function void build_phase(uvm_phase phase);
    22              1                          1             super.build_phase(phase);
    23                                                       
    24              1                          1             env = alsu_env::type_id::create("env", this);
    25              1                          1             alsu_cfg = alsu_config::type_id::create("alsu_cfg");
    26              1                          1             reset_seq =  alsu_reset_seq::type_id::create("reset_seq");
    27              1                          1             main_seq =  alsu_main_seq::type_id::create("main_seq");
    28                                               
    29                                                       if (!uvm_config_db #(virtual alsu_if)::get(this, "", "ALSU_VIF", alsu_cfg.alsu_vif)) begin
    30              1                    ***0***                 `uvm_fatal("BUILD_PHASE", "Test - Unable to get virtual interface of the ALSU")
    31                                                       end
    32                                               
    33              1                          1             uvm_config_db #(alsu_config)::set(this, "*", "CFG", alsu_cfg);
    34                                                   endfunction
    35                                               
    36                                                   task run_phase(uvm_phase phase);
    37              1                          1             super.run_phase(phase);
    38              1                          1             phase.raise_objection(this);
    39                                               
    40                                                       // reset sequence 
    41              1                          1             reset_seq.start(env.agent.sequencer);
    42              1                          1             `uvm_info("RUN_PHASE", "Reset Asserted", UVM_LOW)
    43              1                          1             `uvm_info("RUN_PHASE", "Reset Deasserted", UVM_LOW)
    44                                               
    45                                                       // main sequence
    46              1                          1             `uvm_info("RUN_PHASE", "Stimulus Generation Started", UVM_LOW)
    47              1                          1             main_seq.start(env.agent.sequencer);
    48              1                          1             `uvm_info("RUN_PHASE", "Stimulus Generation Ended", UVM_LOW)
    49                                                       
    50              1                          1             phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /alsu_coverage_pkg/alsu_coverage/cvg            100.00%        100          -    Covered              
    covered/total bins:                                    76         76          -                      
    missing/total bins:                                     0         76          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint ADD_MULT_A_cp                          100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_0                                      245          1          -    Covered              
        bin A_data_max                                    162          1          -    Covered              
        bin A_data_min                                    165          1          -    Covered              
        default bin A_data_default                        429                     -    Occurred             
    Coverpoint RED_A_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_walkingones[-4]                         93          1          -    Covered              
        bin A_data_walkingones[1]                          53          1          -    Covered              
        bin A_data_walkingones[2]                          48          1          -    Covered              
    Coverpoint ADD_MULT_B_cp                          100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_0                                      218          1          -    Covered              
        bin B_data_max                                    140          1          -    Covered              
        bin B_data_min                                    170          1          -    Covered              
        default bin B_data_default                        473                     -    Occurred             
    Coverpoint RED_B_cp                               100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_walkingones[-4]                         55          1          -    Covered              
        bin B_data_walkingones[1]                          33          1          -    Covered              
        bin B_data_walkingones[2]                          26          1          -    Covered              
    Coverpoint opcode_cp                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin bins_invalid                           79                     -    Occurred             
        bin bins_shift[SHIFT]                             154          1          -    Covered              
        bin bins_shift[ROTATE]                            156          1          -    Covered              
        bin bins_arith[ADD]                               159          1          -    Covered              
        bin bins_arith[MULT]                              151          1          -    Covered              
        bin bins_bitwise[OR]                              143          1          -    Covered              
        bin bins_bitwise[XOR]                             159          1          -    Covered              
    Coverpoint opcode_shift_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_shift[SHIFT]                             154          1          -    Covered              
        bin bins_shift[ROTATE]                            156          1          -    Covered              
    Coverpoint opcode_arith_cp                        100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_arith[ADD]                               159          1          -    Covered              
        bin bins_arith[MULT]                              151          1          -    Covered              
    Coverpoint opcode_bitwise_cp                      100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_arith[OR]                                143          1          -    Covered              
        bin bins_arith[XOR]                               159          1          -    Covered              
    Coverpoint opcode_not_bitwise_cp                  100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        bin bins_not_bitwise[ADD]                         159          1          -    Covered              
        bin bins_not_bitwise[MULT]                        151          1          -    Covered              
        bin bins_not_bitwise[SHIFT]                       154          1          -    Covered              
        bin bins_not_bitwise[ROTATE]                      156          1          -    Covered              
        bin bins_not_bitwise[INVALID_6]                    39          1          -    Covered              
        bin bins_not_bitwise[INVALID_7]                    40          1          -    Covered              
    Coverpoint cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       503          1          -    Covered              
        bin auto[1]                                       498          1          -    Covered              
    Coverpoint direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[RIGHT]                                   494          1          -    Covered              
        bin auto[LEFT]                                    507          1          -    Covered              
    Coverpoint serial_in_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       523          1          -    Covered              
        bin auto[1]                                       478          1          -    Covered              
    Coverpoint red_op_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       521          1          -    Covered              
        bin auto[1]                                       480          1          -    Covered              
    Coverpoint red_op_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin auto[0]                                       479          1          -    Covered              
        bin auto[1]                                       522          1          -    Covered              
    Cross ADD_MULT_cross                              100.00%        100          -    Covered              
        covered/total bins:                                18         18          -                      
        missing/total bins:                                 0         18          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <A_data_min,B_data_min,bins_arith[MULT]> 
                                                           13          1          -    Covered              
            bin <A_data_min,B_data_min,bins_arith[ADD]> 
                                                            5          1          -    Covered              
            bin <A_data_max,B_data_min,bins_arith[MULT]> 
                                                            8          1          -    Covered              
            bin <A_data_max,B_data_min,bins_arith[ADD]> 
                                                           10          1          -    Covered              
            bin <A_data_0,B_data_min,bins_arith[MULT]> 
                                                            6          1          -    Covered              
            bin <A_data_0,B_data_min,bins_arith[ADD]> 
                                                           12          1          -    Covered              
            bin <A_data_min,B_data_max,bins_arith[MULT]> 
                                                           13          1          -    Covered              
            bin <A_data_min,B_data_max,bins_arith[ADD]> 
                                                            8          1          -    Covered              
            bin <A_data_max,B_data_max,bins_arith[MULT]> 
                                                            7          1          -    Covered              
            bin <A_data_max,B_data_max,bins_arith[ADD]> 
                                                            9          1          -    Covered              
            bin <A_data_0,B_data_max,bins_arith[MULT]> 
                                                           11          1          -    Covered              
            bin <A_data_0,B_data_max,bins_arith[ADD]> 
                                                           10          1          -    Covered              
            bin <A_data_min,B_data_0,bins_arith[MULT]> 
                                                            5          1          -    Covered              
            bin <A_data_min,B_data_0,bins_arith[ADD]> 
                                                           16          1          -    Covered              
            bin <A_data_max,B_data_0,bins_arith[MULT]> 
                                                            4          1          -    Covered              
            bin <A_data_max,B_data_0,bins_arith[ADD]> 
                                                           12          1          -    Covered              
            bin <A_data_0,B_data_0,bins_arith[MULT]> 
                                                           10          1          -    Covered              
            bin <A_data_0,B_data_0,bins_arith[ADD]> 
                                                           11          1          -    Covered              
    Cross ADD_cin_cross                               100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[1],bins_arith[ADD]>                  79          1          -    Covered              
            bin <auto[0],bins_arith[ADD]>                  80          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_MULT                          151                     -    Occurred             
    Cross SHIFT_direction_cross                       100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[LEFT],bins_shift[SHIFT]>             77          1          -    Covered              
            bin <auto[RIGHT],bins_shift[SHIFT]>            77          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_ROTATE                        156                     -    Occurred             
    Cross SHIFT_serial_in_cross                       100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <auto[1],bins_shift[SHIFT]>                80          1          -    Covered              
            bin <auto[0],bins_shift[SHIFT]>                74          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin bins_ROTATE                        156                     -    Occurred             
    Cross red_op_A_cross                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <A_data_walkingones[2],B_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <A_data_walkingones[2],B_data_0,bins_arith[OR]> 
                                                            7          1          -    Covered              
            bin <A_data_walkingones[1],B_data_0,bins_arith[XOR]> 
                                                           13          1          -    Covered              
            bin <A_data_walkingones[1],B_data_0,bins_arith[OR]> 
                                                            3          1          -    Covered              
            bin <A_data_walkingones[-4],B_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <A_data_walkingones[-4],B_data_0,bins_arith[OR]> 
                                                           11          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin B_data_min                           7                     -    Occurred             
            ignore_bin B_data_max                           2                     -    Occurred             
    Cross red_op_B_cross                              100.00%        100          -    Covered              
        covered/total bins:                                 6          6          -                      
        missing/total bins:                                 0          6          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin <B_data_walkingones[2],A_data_0,bins_arith[XOR]> 
                                                           10          1          -    Covered              
            bin <B_data_walkingones[2],A_data_0,bins_arith[OR]> 
                                                            6          1          -    Covered              
            bin <B_data_walkingones[1],A_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[1],A_data_0,bins_arith[OR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[-4],A_data_0,bins_arith[XOR]> 
                                                            8          1          -    Covered              
            bin <B_data_walkingones[-4],A_data_0,bins_arith[OR]> 
                                                           13          1          -    Covered              
        Illegal and Ignore Bins:
            ignore_bin A_data_min                           0                     -    ZERO                 
            ignore_bin A_data_max                           0                     -    ZERO                 
    Cross invalid_red_op_A_cross [2]                    0.00%        100          -    ZERO                 
        covered/total bins:                                 0          0          -                      
        missing/total bins:                                 0          0          -                      
        % Hit:                                        100.00%        100          -                      
        Illegal and Ignore Bins:
            ignore_bin red_op_A_0                         355                     -    Occurred             
            illegal_bin red_op_A_1                        344                     -    Occurred             
    Cross invalid_red_op_B_cross [2]                    0.00%        100          -    ZERO                 
        covered/total bins:                                 0          0          -                      
        missing/total bins:                                 0          0          -                      
        % Hit:                                        100.00%        100          -                      
        Illegal and Ignore Bins:
            ignore_bin red_op_B_0                         327                     -    Occurred             
            illegal_bin red_op_B_1                        372                     -    Occurred             

 [2] - Does not contribute coverage as the item is empty

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_main_seq_pkg/alsu_main_seq/body/#ublk#261799367#16/immed__19
                     ALSU_main_seq.sv(19)               0          1

Total Coverage By Instance (filtered view): 83.90%

