Coverage Report by instance with details

=================================================================================
=== Instance: /alsu_tb/DUT
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        32        32         0   100.00%

================================Branch Details================================

Branch Coverage for instance /alsu_tb/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
------------------------------------IF Branch------------------------------------
    24                                      1056     Count coming in to IF
    24              1                        109       if(rst) begin
    35              1                        947       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    51                                      1056     Count coming in to IF
    51              1                        109       if(rst) begin
    53              1                        947       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    54                                       947     Count coming in to IF
    54              1                        495           if (invalid)
    56              1                        452           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    63                                      1055     Count coming in to IF
    63              1                        108       if(rst) begin
    66              1                        947       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    67                                       947     Count coming in to IF
    67              1                          1         if (bypass_A_reg && bypass_B_reg)
    69              1                         51         else if (bypass_A_reg)
    71              1                         49         else if (bypass_B_reg)
    73              1                        441         else if (invalid) 
    75              1                        405         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    76                                       405     Count coming in to CASE
    77              1                         59               3'h0: begin 
    87              1                         70               3'h1: begin
    97              1                         52               3'h2: out <= A_reg + B_reg;
    98              1                         74               3'h3: out <= A_reg * B_reg;
    99              1                         52               3'h4: begin
    105             1                         63               3'h5: begin
                                              35     All False Count
Branch totals: 7 hits of 7 branches = 100.00%

------------------------------------IF Branch------------------------------------
    78                                        59     Count coming in to IF
    78              1                          9                 if (red_op_A_reg && red_op_B_reg)
    80              1                         10                 else if (red_op_A_reg) 
    82              1                          6                 else if (red_op_B_reg)
    84              1                         34                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    88                                        70     Count coming in to IF
    88              1                          9                 if (red_op_A_reg && red_op_B_reg)
    90              1                         16                 else if (red_op_A_reg) 
    92              1                         10                 else if (red_op_B_reg)
    94              1                         35                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    100                                       52     Count coming in to IF
    100             1                         21                 if (direction_reg)
    102             1                         31                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                       63     Count coming in to IF
    106             1                         34                 if (direction_reg)
    108             1                         29                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /alsu_tb/DUT --

  File ALSU.v
----------------Focused Condition View-------------------
Line       67 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       78 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       88 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /alsu_tb/DUT --

  File ALSU.v
----------------Focused Expression View-----------------
Line       18 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       19 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       20 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        48         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_tb/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.v
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, cin, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg signed [1:0] cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;
    14                                               
    15                                               wire invalid_red_op, invalid_opcode, invalid;
    16                                               
    17                                               //Invalid handling
    18              1                        957     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    19              1                        837     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    20              1                        557     assign invalid = invalid_red_op | invalid_opcode;
    21                                               
    22                                               //Registering input signals
    23              1                       1056     always @(posedge clk or posedge rst) begin
    24                                                 if(rst) begin
    25              1                        109          cin_reg <= 0;
    26              1                        109          red_op_B_reg <= 0;
    27              1                        109          red_op_A_reg <= 0;
    28              1                        109          bypass_B_reg <= 0;
    29              1                        109          bypass_A_reg <= 0;
    30              1                        109          direction_reg <= 0;
    31              1                        109          serial_in_reg <= 0;
    32              1                        109          opcode_reg <= 0;
    33              1                        109          A_reg <= 0;
    34              1                        109          B_reg <= 0;
    35                                                 end else begin
    36              1                        947          cin_reg <= cin;
    37              1                        947          red_op_B_reg <= red_op_B;
    38              1                        947          red_op_A_reg <= red_op_A;
    39              1                        947          bypass_B_reg <= bypass_B;
    40              1                        947          bypass_A_reg <= bypass_A;
    41              1                        947          direction_reg <= direction;
    42              1                        947          serial_in_reg <= serial_in;
    43              1                        947          opcode_reg <= opcode;
    44              1                        947          A_reg <= A;
    45              1                        947          B_reg <= B;
    46                                                 end
    47                                               end
    48                                               
    49                                               //leds output blinking 
    50              1                       1056     always @(posedge clk or posedge rst) begin
    51                                                 if(rst) begin
    52              1                        109          leds <= 0;
    53                                                 end else begin
    54                                                     if (invalid)
    55              1                        495             leds <= ~leds;
    56                                                     else
    57              1                        452             leds <= 0;
    58                                                 end
    59                                               end
    60                                               
    61                                               //ALSU output processing
    62              1                       1055     always @(posedge clk or posedge rst) begin
    63                                                 if(rst) begin
    64              1                        108         out <= 0;
    65                                                 end
    66                                                 else begin
    67                                                   if (bypass_A_reg && bypass_B_reg)
    68              1                          1           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    69                                                   else if (bypass_A_reg)
    70              1                         51           out <= A_reg;
    71                                                   else if (bypass_B_reg)
    72              1                         49           out <= B_reg;
    73                                                   else if (invalid) 
    74              1                        441             out <= 0;
    75                                                   else begin
    76                                                       case (opcode)
    77                                                         3'h0: begin 
    78                                                           if (red_op_A_reg && red_op_B_reg)
    79              1                          9                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    80                                                           else if (red_op_A_reg) 
    81              1                         10                   out <= |A_reg;
    82                                                           else if (red_op_B_reg)
    83              1                          6                   out <= |B_reg;
    84                                                           else 
    85              1                         34                   out <= A_reg | B_reg;
    86                                                         end
    87                                                         3'h1: begin
    88                                                           if (red_op_A_reg && red_op_B_reg)
    89              1                          9                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;
    90                                                           else if (red_op_A_reg) 
    91              1                         16                   out <= ^A_reg;
    92                                                           else if (red_op_B_reg)
    93              1                         10                   out <= ^B_reg;
    94                                                           else 
    95              1                         35                   out <= A_reg ^ B_reg;
    96                                                         end
    97              1                         52               3'h2: out <= A_reg + B_reg;
    98              1                         74               3'h3: out <= A_reg * B_reg;
    99                                                         3'h4: begin
    100                                                          if (direction_reg)
    101             1                         21                   out <= {out[4:0], serial_in_reg};
    102                                                          else
    103             1                         31                   out <= {serial_in_reg, out[5:1]};
    104                                                        end
    105                                                        3'h5: begin
    106                                                          if (direction_reg)
    107             1                         34                   out <= {out[4:0], out[5]};
    108                                                          else
    109             1                         29                   out <= {out[0], out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        120       118         2    98.33%

================================Toggle Details================================

Toggle Coverage for instance /alsu_tb/DUT --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            A[0-2]           1           1                              100.00 
                                        A_reg[2-0]           1           1                              100.00 
                                            B[0-2]           1           1                              100.00 
                                        B_reg[2-0]           1           1                              100.00 
                                          bypass_A           1           1                              100.00 
                                      bypass_A_reg           1           1                              100.00 
                                          bypass_B           1           1                              100.00 
                                      bypass_B_reg           1           1                              100.00 
                                               cin           1           1                              100.00 
                                        cin_reg[1]           0           0                                0.00 
                                        cin_reg[0]           1           1                              100.00 
                                               clk           1           1                              100.00 
                                         direction           1           1                              100.00 
                                     direction_reg           1           1                              100.00 
                                           invalid           1           1                              100.00 
                                    invalid_opcode           1           1                              100.00 
                                    invalid_red_op           1           1                              100.00 
                                        leds[15-0]           1           1                              100.00 
                                       opcode[0-2]           1           1                              100.00 
                                   opcode_reg[2-0]           1           1                              100.00 
                                          out[5-0]           1           1                              100.00 
                                          red_op_A           1           1                              100.00 
                                      red_op_A_reg           1           1                              100.00 
                                          red_op_B           1           1                              100.00 
                                      red_op_B_reg           1           1                              100.00 
                                               rst           1           1                              100.00 
                                         serial_in           1           1                              100.00 
                                     serial_in_reg           1           1                              100.00 

Total Node Count     =         60 
Toggled Node Count   =         59 
Untoggled Node Count =          1 

Toggle Coverage      =      98.33% (118 of 120 bins)

=================================================================================
=== Instance: /alsu_tb
=== Design Unit: work.alsu_tb
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_tb/#ublk#138065602#88/immed__90
                     ALSU_tb.sv(90)                     0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         6         5         1    83.33%

================================Branch Details================================

Branch Coverage for instance /alsu_tb

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_tb.sv
------------------------------------IF Branch------------------------------------
    125                                     1001     Count coming in to IF
    125             1                        225             if (out !== golden_out) begin
                                             776     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    130                                     1001     Count coming in to IF
    130             1                    ***0***             if (leds !== golden_leds) begin
                                            1001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    135                                     1001     Count coming in to IF
    135             1                        776             if (local_error_count == 0) begin
    138             1                        225             end else begin
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       3         2         1    66.66%

================================Condition Details================================

Condition Coverage for instance /alsu_tb --

  File ALSU_tb.sv
----------------Focused Condition View-------------------
Line       125 Item    1  (out !== golden_out)
Condition totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (out !== golden_out)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (out !== golden_out)_0  -                             
  Row   2:          1  (out !== golden_out)_1  -                             

----------------Focused Condition View-------------------
Line       130 Item    1  (leds !== golden_leds)
Condition totals: 0 of 1 input term covered = 0.00%

              Input Term   Covered  Reason for no coverage   Hint
             -----------  --------  -----------------------  --------------
  (leds !== golden_leds)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                Non-masking condition(s)      
 ---------  ---------  --------------------      -------------------------     
  Row   1:          1  (leds !== golden_leds)_0  -                             
  Row   2:    ***0***  (leds !== golden_leds)_1  -                             

----------------Focused Condition View-------------------
Line       135 Item    1  (local_error_count == 0)
Condition totals: 1 of 1 input term covered = 100.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (local_error_count == 0)         Y

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:          1  (local_error_count == 0)_0  -                             
  Row   2:          1  (local_error_count == 0)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      40        38         2    95.00%

================================Statement Details================================

Statement Coverage for instance /alsu_tb --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_tb.sv
    5                                                module alsu_tb;
    6                                                    // TESTBENCH VARIABLES
    7                                                    int NUM_TEST_CASES = 1000;
    8                                                    int local_error_count = 0;
    9                                                    int error_count = 0;
    10                                                   int pass_count = 0;
    11                                                   
    12                                                   // DUT 
    13                                                   parameter INPUT_PRIORITY = "A";
    14                                                   parameter FULL_ADDER = "ON";
    15                                                   bit clk;
    16                                                   bit rst;
    17                                                   bit cin;
    18                                                   bit red_op_A;
    19                                                   bit red_op_B;
    20                                                   bit bypass_A;
    21                                                   bit bypass_B;
    22                                                   bit direction;
    23                                                   bit serial_in;
    24                                                   opcode_e opcode;
    25                                                   bit signed [2:0] A;
    26                                                   bit signed [2:0] B;
    27                                                   logic [15:0] leds;
    28                                                   logic signed [5:0] out;
    29                                               
    30                                                   // GOLDEN MODEL
    31                                                   logic signed [5:0] golden_out;
    32                                                   logic [15:0] golden_leds;
    33                                                   
    34                                                   ALSU #(
    35                                                       .INPUT_PRIORITY(INPUT_PRIORITY), 
    36                                                       .FULL_ADDER(FULL_ADDER)
    37                                                   ) DUT (
    38                                                       .clk(clk),
    39                                                       .rst(rst),
    40                                                       .cin(cin),
    41                                                       .red_op_A(red_op_A),
    42                                                       .red_op_B(red_op_B),
    43                                                       .bypass_A(bypass_A),
    44                                                       .bypass_B(bypass_B),    
    45                                                       .direction(direction),
    46                                                       .serial_in(serial_in),
    47                                                       .opcode(opcode),
    48                                                       .A(A),
    49                                                       .B(B),
    50                                                       .leds(leds),
    51                                                       .out(out)
    52                                                   );
    53                                               
    54                                                   ALSU_golden #(
    55                                                       .INPUT_PRIORITY(INPUT_PRIORITY), 
    56                                                       .FULL_ADDER(FULL_ADDER)
    57                                                   ) GOLDEN (
    58                                                       .clk(clk),
    59                                                       .rst(rst),
    60                                                       .cin(cin),
    61                                                       .red_op_A(red_op_A),
    62                                                       .red_op_B(red_op_B),
    63                                                       .bypass_A(bypass_A),
    64                                                       .bypass_B(bypass_B),    
    65                                                       .direction(direction),
    66                                                       .serial_in(serial_in),
    67                                                       .opcode(opcode),
    68                                                       .A(A),
    69                                                       .B(B),
    70                                                       .leds(golden_leds),
    71                                                       .out(golden_out)
    72                                                   );
    73                                               
    74                                                   alsu_inputs alsu_obj;
    75                                                   
    76                                                   initial begin
    77              1                          1             clk = 0;
    78              1                          1             forever #5 clk = ~clk;
    78              2                       2005     
    78              3                       2004     
    79                                                   end
    80                                               
    81                                                   initial begin
    82              1                          1             $display("Starting ALSU testbench...");
    83              1                          1             alsu_obj = new();
    84                                               
    85              1                          1             assert_reset();
    86              1                          1             check_result();
    87                                               
    88              1                       1000             repeat(NUM_TEST_CASES) begin
    89              1                       1000                 wait_cycles(1);
    90                                                           assert(alsu_obj.randomize());
    91              1                       1000                 rst = alsu_obj.rst;
    92              1                       1000                 cin = alsu_obj.cin;
    93              1                       1000                 red_op_A = alsu_obj.red_op_A;
    94              1                       1000                 red_op_B = alsu_obj.red_op_B;
    95              1                       1000                 bypass_A = alsu_obj.bypass_A;
    96              1                       1000                 bypass_B = alsu_obj.bypass_B;
    97              1                       1000                 direction = alsu_obj.direction;
    98              1                       1000                 serial_in = alsu_obj.serial_in;
    99              1                       1000                 opcode = alsu_obj.opcode;
    100             1                       1000                 A = alsu_obj.A;
    101             1                       1000                 B = alsu_obj.B;
    102             1                       1000                 check_result();
    103                                                      end
    104                                              	
    105                                              	// Display completion message
    106             1                          1             $display("Simulation Completed: %0d test cases executed.", NUM_TEST_CASES);
    107             1                          1             $display("Test Summary: Passed = %0d, Failed = %0d", pass_count, error_count);
    108             1                          1     	$stop;
    109                                                  end
    110                                              
    111                                                  task wait_cycles(input int num_cycles);
    112             1                       1002             repeat (num_cycles) @(negedge clk);
    112             2                       1002     
    113                                                  endtask
    114                                              
    115                                                  task assert_reset();
    116             1                          1             wait_cycles(1);
    117             1                          1             rst = 1;
    118             1                          1             wait_cycles(1);
    119             1                          1             rst = 0;
    120                                                  endtask
    121                                                  
    122                                                  task check_result();
    123             1                       1001             local_error_count = 0;
    124                                              
    125                                                      if (out !== golden_out) begin
    126             1                        225                 $error("[ERROR] out mismatch. Expected: %0d, Got: %0d", golden_out, out);
    127             1                        225                 local_error_count++;
    128                                                      end
    129                                              
    130                                                      if (leds !== golden_leds) begin
    131             1                    ***0***                 $error("[ERROR] leds mismatch. Expected: %b, Got: %b", golden_leds, leds);
    132             1                    ***0***                 local_error_count++;
    133                                                      end
    134                                              
    135                                                      if (local_error_count == 0) begin
    136             1                        776                 pass_count++;
    137             1                        776                 $display("[PASS] Outputs match expected values.");
    138                                                      end else begin
    139             1                        225                 error_count++;
    140             1                        225                 $display("[FAIL] Total mismatches in this check: %0d", local_error_count);

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        318       162       156    50.94%

================================Toggle Details================================

Toggle Coverage for instance /alsu_tb --

                                              Node      1H->0L      0L->1H                          "Coverage"
                                              ---------------------------------------------------------------
                                            A[0-2]           1           1                              100.00 
                                            B[0-2]           1           1                              100.00 
                                          bypass_A           1           1                              100.00 
                                          bypass_B           1           1                              100.00 
                                               cin           1           1                              100.00 
                                               clk           1           1                              100.00 
                                         direction           1           1                              100.00 
                                  error_count[0-6]           1           1                              100.00 
                                    error_count[7]           0           1                               50.00 
                                 error_count[8-31]           0           0                                0.00 
                                 golden_leds[0-15]           1           1                              100.00 
                                   golden_out[0-5]           1           1                              100.00 
                                        leds[0-15]           1           1                              100.00 
                              local_error_count[0]           1           1                              100.00 
                           local_error_count[1-31]           0           0                                0.00 
                                            opcode               ENUM type       Value       Count 
                                                                        OR           1      100.00 
                                                                       XOR           3      100.00 
                                                                       ADD           2      100.00 
                                                                       MUL           3      100.00 
                                                                     SHIFT           3      100.00 
                                                                    ROTATE           3      100.00 
                                                                 INVALID_6           2      100.00 
                                                                 INVALID_7           1      100.00 
                                          out[0-5]           1           1                              100.00 
                                   pass_count[0-8]           1           1                              100.00 
                                     pass_count[9]           0           1                               50.00 
                                 pass_count[10-31]           0           0                                0.00 
                                          red_op_A           1           1                              100.00 
                                          red_op_B           1           1                              100.00 
                                               rst           1           1                              100.00 
                                         serial_in           1           1                              100.00 

Total Node Count     =        163 
Toggled Node Count   =         84 
Untoggled Node Count =         79 

Toggle Coverage      =      50.94% (162 of 318 bins)


ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_tb/#ublk#138065602#88/immed__90
                     ALSU_tb.sv(90)                     0          1

Total Coverage By Instance (filtered view): 91.31%

